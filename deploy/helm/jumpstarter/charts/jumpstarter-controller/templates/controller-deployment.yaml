apiVersion: apps/v1
kind: Deployment
metadata:
  name: jumpstarter-controller
  namespace: {{ include "jumpstarter.namespace" . }}
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: jumpstarter-controller
{{- with .Values.commonLabels }}
{{- toYaml . | nindent 4 }}
{{- end }}
{{- if .Values.global.timestamp }}
    deployment.timestamp: {{ .Values.global.timestamp | quote }}
{{- end }}
  annotations:
    configmap-sha256: {{ include (print $.Template.BasePath "/cms/controller-cm.yaml") . | sha256sum }}
    argocd.argoproj.io/sync-wave: "1"
{{- $annotations := include "jumpstarter.annotations" . }}
{{- if $annotations }}
{{- $annotations | nindent 4 }}
{{- end }}
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
{{- $podAnnotations := include "jumpstarter.podAnnotations" . }}
{{- if $podAnnotations }}
{{- $podAnnotations | nindent 8 }}
{{- end }}
      labels:
        control-plane: controller-manager
{{- with .Values.commonLabels }}
{{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.podLabels }}
{{- toYaml . | nindent 8 }}
{{- end }}
{{- if .Values.global.timestamp }}
        deployment.timestamp: {{ .Values.global.timestamp | quote }}
{{- end }}
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - args:
          - --leader-elect
          - --health-probe-bind-address=:8081
          - -metrics-bind-address=:8080
        env:
        - name: GRPC_ENDPOINT
          value: {{ include "jumpstarter.grpc.endpoint" . }}
        - name: CONTROLLER_KEY
          valueFrom:
            secretKeyRef:
              name: jumpstarter-controller-secret
              key: key
        - name: ROUTER_KEY
          valueFrom:
            secretKeyRef:
              name: jumpstarter-router-secret
              key: key
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- if .Values.extraEnvVarsCM }}
        - name: EXTRA_ENVVARS_CM
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.extraEnvVarsCM }}
        {{- end }}
        {{- if .Values.extraEnvVarsSecret }}
        - name: EXTRA_ENVVARS_SECRET  
          valueFrom:
            secretKeyRef:
              name: {{ .Values.extraEnvVarsSecret }}
        {{- end }}
        {{- if .Values.extraEnvVars }}
        {{- range .Values.extraEnvVars }}
        - name: {{ .name }}
          {{- if .value }}
          value: {{ tpl .value $ | quote }}
          {{- else if .valueFrom }}
          valueFrom:
          {{- toYaml .valueFrom | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- end }}

        image: {{ include "jumpstarter.image" . }}:{{ include "jumpstarter.tag" . }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 1000m
            memory: 256Mi
        {{- if .Values.extraVolumeMounts }}
        volumeMounts:
        {{- toYaml .Values.extraVolumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.sidecars }}
      {{- toYaml .Values.sidecars | nindent 6 }}
      {{- end }}
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
      {{- if .Values.extraVolumes }}
      volumes:
      {{- toYaml .Values.extraVolumes | nindent 6 }}
      {{- end }}
